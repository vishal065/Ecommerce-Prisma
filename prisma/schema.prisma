// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model User {
  id                       Int       @id @default(autoincrement())
  name                     String
  email                    String    @unique
  password                 String
  role                     Role      @default(USER)
  defaultShippingAddressId Int?
  defaultBillingAddressId  Int?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  Address                  Address[]
  Product                  Product[]
  Cart                     Cart[]
  Order                    Order[]

  @@map("users")
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String         @db.Text //this is bec mysql it restrict to use certain number of character in database @db.Text this make the column text type in database. it is only req in mysql
  price        Decimal        @db.Decimal(10, 2) // Total 10 digits, 2 of which are after the decimal point
  tags         String
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  Cart         Cart[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderProduct OrderProduct[]

  @@map("products")
}

model Address {
  id        Int      @id @default(autoincrement())
  line1     String
  line2     String?
  city      String
  country   String
  pincode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("address")
}

model Cart {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId]) // Unique constraint on productId and userId
  @@map("cart")
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  netAmount    Decimal
  address      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderProduct OrderProduct[]
  OrderEvent   OrderEvent[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_products")
}

model OrderEvent {
  id        Int              @id @default(autoincrement())
  orderId   Int
  status    OrderEventStatus @default(PENDING)
  order     Order            @relation(fields: [orderId], references: [id])
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("order_event")
}
